#line 2 "src/Gui/AccountRegister.h"

#ifndef __GUI_ACCOUNTREGISTER_H___
#define __GUI_ACCOUNTREGISTER_H___

#include <Wt/Json/Object.h>
#include <Wt/WBatchEditProxyModel.h>
#include <Wt/WContainerWidget.h>
#include <Wt/WSortFilterProxyModel.h>
#include <Wt/WStandardItem.h>
#include <Wt/WStandardItemModel.h>
#include <Wt/WPopupMenu.h>

#include "../GnuCashew.h"
#include "../Eng/AccountRegisterModel.h"
#include "TableView.h"


namespace GCW {

  // FIXME
  // not sure why I need to forward-declare this class... it's
  //  right up there in the header
  namespace Eng { class AccountRegisterModel; }

  namespace Gui {

/*!
** \brief AccountRegister
**
** The AccountRegister is a widget that displays transactions from a single account
**  within the system.  It displays the account transactions in a spreadsheet-table-like
**  format with multiple columns representing other field values such as;
**  date, check-number, description... and so on.
**
** \image html AccountRegister.png "Account Register" width=480
**
** The goal here is to make this widget behave just as closely as possible to the
**  GnuCash interface, because theirs is very slick and makes navigating the register
**  a no-mouse-necessary affair.  One of the problems with web-based interfaces, however,
**  is trapping keys completely, such as the ~tab~ key.  So... we'll see how this
**  goes!
**
** The register view also grants the user editing abilities.  When the user clicks on
**  fields that are ~not~ reconciled, and appropriate 'editor' will open.  The editor
**  depends on the column selected, and is generated by the column Delegates.
**
*/
class AccountRegister
: public Wt::WContainerWidget
{
  private:

    /*!
    ** The status-bar presents various totals from the register,
    **  including the rowCount().
    **
    */
    class StatusBar
    : public Wt::WContainerWidget
    {
      public:
        StatusBar();

        auto setPresent   ( GCW_NUMERIC _value = GCW_NUMERIC(0) )-> void;
        auto setFuture    ( GCW_NUMERIC _value = GCW_NUMERIC(0) )-> void;
        auto setCleared   ( GCW_NUMERIC _value = GCW_NUMERIC(0) )-> void;
        auto setReconciled( GCW_NUMERIC _value = GCW_NUMERIC(0) )-> void;
        auto setProjected ( GCW_NUMERIC _value = GCW_NUMERIC(0) )-> void;
        auto setRowCount  ( int         _value = 0              )-> void;

      private:

        Wt::WText * m_present    = nullptr;
        Wt::WText * m_future     = nullptr;
        Wt::WText * m_cleared    = nullptr;
        Wt::WText * m_reconciled = nullptr;
        Wt::WText * m_projected  = nullptr;
        Wt::WText * m_rowCount   = nullptr;

    }; // endclass StatusBar

  public:

    /*!
    ** \brief Model
    **
    ** An alias for the Model in case this interface changes.
    **
    */
    using BaseModel       = GCW::Eng::AccountRegisterModel;
    using SortFilterModel = Wt::WSortFilterProxyModel;
    using BatchEditModel  = Wt::WBatchEditProxyModel;

    /*!
    ** \brief Constructor
    **
    ** A register must be opened to a specific AccountGuid.  If the AccountGuid
    **  is blank or cannot be found (why would that be?) then the register simply
    **  opens, allows registry entries, but has no place to save them (dangerous?).
    **
    */
    AccountRegister( const std::string & _accountGuid = "" );

    auto setAccountGuid( const std::string & _accountGuid )-> void ;

    /*!
    ** \brief Table View
    **
    */
    auto tableView ()-> GCW::Gui::TableView * { return m_tableView; }

    auto baseModel       ()-> std::shared_ptr< BaseModel       >  { return m_baseModel;       }
    auto sortFilterModel ()-> std::shared_ptr< SortFilterModel >  { return m_sortFilterModel; }
    auto batchEditModel  ()-> std::shared_ptr< BatchEditModel  >  { return m_batchEditModel;  }

    auto statusBar()-> StatusBar * { return m_statusBar; }

    auto test()-> void;

    /*!
    ** \brief Create View Properties JSON Object
    **
    ** This will pack all of the Widget display variables in to a JSON
    **  object for restoration later.
    **
    ** \sa fromJson()
    **
    */
    auto toJson() const-> Wt::Json::Object;

    /*!
    ** \brief Set View Properties from JSON Object
    **
    ** This accepts a JSON object containing all of the view properties
    **  and applys them to the view, essentially restoring it
    **  to its previous layout.
    **
    */
    auto fromJson( const Wt::Json::Object & _jobj )-> bool;

  private:

    auto loadData()-> void;
    auto editRow( int _row )-> void;
    auto deleteRow( int _row )-> void;
//    auto editRow( Wt::WModelIndex _index )-> void;
    auto lastIndex()-> Wt::WModelIndex;
    auto on_showPopup_triggered( const Wt::WModelIndex & _index, const Wt::WMouseEvent & _event )-> void;
    auto on_delete_triggered()-> void;

    Wt::WPopupMenu                                 m_popupMenu               ;
    std::string                                    m_accountGuid             ;
    std::shared_ptr< BaseModel                 >   m_baseModel               ;
    std::shared_ptr< Wt::WSortFilterProxyModel >   m_sortFilterModel         ;
    std::shared_ptr< Wt::WBatchEditProxyModel  >   m_batchEditModel          ;
    GCW::Gui::TableView                          * m_tableView     = nullptr ;
    StatusBar                                    * m_statusBar     = nullptr ;
    int                                            m_clickedRow    = -1      ;
    int                                            m_clickedCol    = -1      ;
    int                                            m_rightClickRow = -1      ;
    int                                            m_rightClickCol = -1      ;

};  // endclass AccountRegister

  } // endnamespace Gui {
} // endnamespace GCW {

#endif // end __GUI_ACCOUNTREGISTER_H___


